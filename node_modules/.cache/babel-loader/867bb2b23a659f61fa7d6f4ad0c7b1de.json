{"ast":null,"code":"var _jsxFileName = \"/home/rohan/Desktop/training/react/react-day3-assignment/src/components/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./Form.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = _ref => {\n  _s();\n\n  let {\n    setShowMeme,\n    selectedImage\n  } = _ref;\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [myMeme, setMyMeme] = useState(\"\");\n\n  const handleTopTextChange = e => {\n    setTopText(e.target.value);\n  };\n\n  const handleBottomTextChange = e => {\n    setBottomText(e.target.value);\n  };\n\n  const handleClick = e => {\n    console.log(selectedImage);\n    e.preventDefault();\n\n    const objectToQueryParam = obj => {\n      const params = Object.entries(obj).map(_ref2 => {\n        let [key, value] = _ref2;\n        return \"\".concat(key, \"=\").concat(value);\n      });\n      return \"?\" + params.join(\"&\");\n    };\n\n    const params = {\n      template_id: selectedImage,\n      text0: topText,\n      text1: bottomText,\n      username: \"rohan04\",\n      password: \"rohanmathur\"\n    };\n    fetch(\"https://api.imgflip.com/caption_image\".concat(JSON.stringify(params)), {\n      method: \"POST\"\n    }).then(response => response.json()).then(response => {\n      console.log(response.data);\n      setMyMeme(response.data.url);\n    });\n  };\n\n  const goBack = () => {\n    setShowMeme(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Generate your own meme!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"secondary-btn\",\n      onClick: goBack,\n      children: \"Go Back!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary-btn\",\n      onClick: handleClick,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleTopTextChange,\n        value: topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleBottomTextChange,\n        value: bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), myMeme && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"output\",\n      src: myMeme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"5p6VPJGneatajk+LO1Y+CMQfdug=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/rohan/Desktop/training/react/react-day3-assignment/src/components/Form.js"],"names":["React","useState","Form","setShowMeme","selectedImage","topText","setTopText","bottomText","setBottomText","myMeme","setMyMeme","handleTopTextChange","e","target","value","handleBottomTextChange","handleClick","console","log","preventDefault","objectToQueryParam","obj","params","Object","entries","map","key","join","template_id","text0","text1","username","password","fetch","JSON","stringify","method","then","response","json","data","url","goBack"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Form.css\";\n\nconst Form = ({setShowMeme, selectedImage}) => {\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [myMeme, setMyMeme] = useState(\"\")\n\n  const handleTopTextChange = (e) => {\n    setTopText(e.target.value);\n  };\n\n  const handleBottomTextChange = (e) => {\n    setBottomText(e.target.value);\n  };\n\n  const handleClick = (e) => {\n    console.log(selectedImage)\n    e.preventDefault();\n\n    const objectToQueryParam = obj => {\n      const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n      return \"?\" + params.join(\"&\");\n    };\n\n    const params = {\n              template_id:selectedImage,\n              text0:topText,\n              text1:bottomText,\n              username:\"rohan04\",\n              password:\"rohanmathur\"\n            };\n\n    fetch(`https://api.imgflip.com/caption_image${JSON.stringify(params)}`,{\n      method:\"POST\",\n      }).then((response) => response.json())\n        .then((response) => {\n          console.log(response.data);\n          setMyMeme(response.data.url);\n      })\n  };\n\n  const goBack = () => {\n    setShowMeme(true);\n  };\n\n  return (\n    <div>\n      <h2>Generate your own meme!</h2>\n      <button className=\"secondary-btn\" onClick={goBack}>\n        Go Back!\n      </button>\n      <button className=\"primary-btn\" onClick={handleClick}>\n        Generate\n      </button>\n      <div className=\"container\">\n        <input onChange={handleTopTextChange} value={topText} />\n        <input onChange={handleBottomTextChange} value={bottomText} />\n      </div>\n      {myMeme && <img className=\"output\" src={myMeme}/>}\n    </div>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}